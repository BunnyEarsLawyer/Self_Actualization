// Determine if a string has all unique characters

// Ex. "abc" // yes
//     "aa"  // no

Thought process:
My first thing to try is to iterate through the string.
Then store a list of individual caracters and add a count for each.
Once any of the counts exceeds 2, then you stop.
A string could be a null terminated array in the world of C.

But first let me see if I have all the information.
How long will the string be? Could it be a very larget string?
Are any special characters allowed? Or is it all the alphabet?
Are there any characters that could show up more often than others?

Assuming they tell me it's only the alphabet and that all characters are randomly as likely to show up.

How will the charcter be stored? Or is that something I define?

Let's assume it's a string object.

Ok. In the worst case, there could be a repeated character at the end of the string. So my first step would be to sort the characters.

Then I could have two pointers to iterate the string. One ahead of the other.
As soon as there is a repeated one, stop! Because there is repetition.

If you reach the end, no repetitions were found.

Let me see if I can think of another appraoch. Meanwhile I will provide an example of what I am thinking of doing.

Approach 1:
ABC....ZA. 
^.......^


Approach 2:
1. Sort
AABC...Z
2. 
AABC...Z
^^
Worst Case, ZZ repeated.
ABC....ZZ

Approach 3:
I see an improvement. As I sort, I could keep track of the charcter count.

Let's code. I'll use python.

-------------
- False is capitalized
- Add : after if statements, for loops, and def of functions
- I googled and learned.
  ss.count('a')
  cc in range (len(word))
------------

Hints: 44, 117, 132

# 44  Try a hash table
# 117 Could a bit vector be useful?
# 132 Can you solve it in O(n*log n) time?
      What might a solution like that look like? 

-----------------------------------------------------------
Solution: Things I did not see.

- Is it an ASCII or a Unicode string?

Unicode is a superset of ASCII. ASCII fits in one 8 bit byte.
Unicode has more but 0-127 are the same mapping as in ASCII.

UTF-32 (4 bytes) or UTF-8 (1 byte) may be used instead. 

Extended ASCII = 256 characters.

- Time complexity: O(n)
- Space complexity: O(1) or O(c) b/c loop will never iterate more than 128 chars. Or O(min(c,n)) where c is the size of the charcter set.

- You cannot have unique characters string that is 280 in lenght if your alphabet is limited to 128 unique caracters! 

If the string length is larger than 128, false directly!
