P8.3 

Good test cases:
  0 1 2 3 4
[ 0,2,3,4,5]  // 0
[-1,1,7,8,9] // 1
[-1,0,1,3,7] // 3
[-1,1,2,4,7] // 1,2
[ 0,1,2,3,4]  // all

O(n) = brute force solution

Hint: O(log(n)) solution?

Tips for myself:
Make a few test cases and solve the problem manually first.
- Determine the base case.
- Understand the problem. To really understand it you need to know the edge cases. The worst cases.
- Listing important variables helps.
- Drawing helps! My arrows.
      <*-->
 <--->
           <--->
 <-----*---------------------->

1. Empty list A = []
2. A is sorted. The lowest and highest values in A are at the edges. 
   if the lowest value in A is higher than the maxx (maximum index) then no magic numbers are possible
   because A's values are outside the bounds of the indices.
   if the highest value in A is lower than the minn (minimum index) then no magic numbers are possible
   because A's values are outside the bounds of the indices.
3. The brute force solution is to iterate through each and every value and check. Solution O(n) time for n elements.
   A[idx] == idx?
4. To speed up I divide and conquer. 
   At first I was trying to divide and kept checking the tail of the division against the maxx.
   After looking at a bunch of examples, I notice that if if the curr_value > than then current index (curr_idx), 
   then the rest of the items in the ordered list are invalidated automatically.


    
      0 1 2 3 4
A = [-1,1,7,8,9] // 1


n = len(A) = 5
minn = 0        //always
maxx = n-1 = 4
curr_val = A[maxx/2]
curr_idx = maxx/2

// 1. check if it's possible to have magic idx's or if A is empty.
if( len(A) == 0): 
    return

bottom_edge = A[0]   //-1
top_edge    = A[n-1] //9

if(top_edge < minn) or (bottom_edge > maxx):
    print('no magic')

// 2. Base case
// [ A  ]
// [B][C]
if curr_val == curr_idx:
    print(curr_val)
    B = A[:, curr_idx - 1]
    C = A[curr_idx + 1, :] 
    find_magic(B)
    find_magic(C)

if curr_val > curr_idx:
    B = [:, curr_idx]
    find_magic(B)

if curr_val < curr_idx:
    C = A[curr_idx + 1, :] 
    find_magic(C) // This is like a keyword GOTO beginning :)
