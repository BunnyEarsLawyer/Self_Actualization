
Advice:
- 45 minutes to solve 1 or 2 problems
- Quiet place, no cell phone, no music
- Talk while thinking! Show analysis and comm skills.
  - Talk your way through the problem out loud.
  - Come up with the best solution before coding.

- Don't start coding right away without a solution in your mind!
- (Some ppl write meaningless code when they're stuck)
- Forget pseudo-code.

- Practice analyzing time & space complexity

- Look at solutions last and compare.

- Outtalk the interviewer
- Code in python (faster) 

- 15 hrs to read the coding interview book.
- 185 Qs, 185 hrs. = 7.7 days.

Common questions
- Queue & Stack
- Graphs & Trees 
    - Study BFS = Breath First Search
- Recursion
- Moderate & Hard questions. 

Common patterns to solutions:
- Use hashsets to detect duplication.
- Append nodes to the head of a linked list, not the back.

Most common data structures to know in-and-out:
- Array
- Stack/Queue
- Hashset/Hashmap/Hastable/Dictionary
- Tree/Binary Tree
- Heap
- Graph

Review
- Implement a Hash table
- Implement a stack and queue.
- Use a stack to implement a recursive algo. iteratively.

Advantages & Disadvantages
- Array
  - To insert or delete, you shift up to n items. O(n)
  - Constant time to access an index b/c it's static in memory. O(c)    
- Linked List
  - Singly or Doubly linked list.
  - Constant time to add or remove item. O(c)
  - To look for an item you have to iterate each an every item O(n)
- Hash Table

- Stack
  - LIFO. 'stack of plates'. Can be made using a Linked List.
  - Constant time add or remove. O(c)
  - No constant time access to the ith element. O(n)?

- Queue
  - FIFO. 'queue at a bank'. Can be made using a Linked List.
  - Often used in BFS (breath first search) or in implementing a cache.
  - E.g. BFS, store a list of nodes we need to process. Each time we proccess a node, add adjacent nodes to the back of the queue. Allows us to process nodes in the order they are viewed.

- Graphs
  - A Graph is a collection of nodes with edges b/t some of them.
      - Vertex (A.K.A node) = where lines connect into a point.
        - Vertex a
      - Edges  (~lines) = lines that connect nodes or vertices. May have arrows.
        - Edge:(a,b)
    - Directed graph = have specific direction, one arrow.
    - Undirected graph = 2 way edges, no arrow or two arrows.
    - Directed edges = 'one way streets'
    - Undirected edges = 'two way strees'
    - Connected Graph = A graph with isolated subgraphs, a path exists b/t every pair of vertices
      - 2 vertices Pi and Pj, a path exists b/t Pi and Pj
    - Acyclic graph = no cycles
    - Implementation:
      - Adjacent List
      - Adjacent Matrix
    - Searching (most common ways)
      - DFS (Depth First Search)
      - BFS (Breath First Search) 
    - More topics
      - Dijkstra's Algorithm
      - Topological Sort 
- Trees
  - Trees are a type of graph. A Tree is a connected graph without cycles.
  - Binary Tree, Binary Search Tree, Terniary or N-ary tree, tree with more nodes.
  - Balanced definition varies.
    - Balanced trees: Red-black trees, AVL trees.
  - Insert and find take O(log n), assuming balanced.
  - Complete definition: only the last right node allowed to be missing.
  - Full binary tree definition: No nodes hade one child.
  - Perfect tree: full + complete (rare in interviews) 
    - 2^k - 1 nodes, k = levels
  - Traversal: in-orde, post-order, pre-order (common in interviews)
  - Complete Binary Trees: Min-Heap, Max-Heap
  - Tries (A.K.A Prefix Trees)

- Recursion
  - A recursive problem is built off of subproblems.
  - Good candidate for recursion: 
    - 'Design an algorithm to compute the nth...'
    - 'Write code to list the n...'
    - 'Implement a method to compute all ...'
  - Go with your gut 50/50 chance. Practice!
  - Bottom-up approach
    - Solve for 1 element. Solve for 2 elements. And so on..
  - Top-Down approach
    - Divide problem for case N insto subproblems. (Careful of overlap)
  - Half-and-Half Approach
    - Divide data in half. E.g. binary search, merge sort.
  - Comparison to iterative solution
    - Recursion can be space inefficient ***
      - O(n) memory b/c you add a new layer to the stack, depth of n.
      - B/c of this it's better to implement recursion iteratively albeit 
        with more complexity in the code.
    - Discuss tradeoffs!
  - REMEMBER: Recursive algorithms take at least O(n) space
  -Types: 
    - tail recursion
    - head recursion 

- Dynamic Programming = optimization technique to speed up programs.
  - People make a big deal of how scary these problems are. BS.
  - Once you get the hang of them, they can be very easy.
  - 1. Take a recursive algorithm and find the overlapping sub-problems (repeated calls).
  - 2. Cache the results for future recursive calls.
  -    You can study teh pattern of recusrive calls and implement something iterative
       You still 'cache' previous work.
  - Terminology
    - Top down Dynamic programming = 'memoization'
    - Bottom up Dynamic programming = 'dynamic programming' 
  - E.g. Compute the nth Fibonacci number.
  - Good problem-solving techniques
    - Draw a call tree
  - Further reading: Proof-by-induction.   


Good review:
http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/
words = ['apple', 'boy', 'chum']
ratios = [0.1, 0.2, 0.3]
for i,word in enumerate(words):
    rations[i]

Numpy array
for idx, value in np.ndenumarate(matrix):


