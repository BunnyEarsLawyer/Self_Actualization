The lifecycle of a class

When you create a class, you want to make it as easy to use as possible.

3 basic operations a class needs to to:

1. Initializing itself
2. Cleaning up memory or other resources
3. Copying itself

- Important to create a good data type
- E.g. string
  - Initialize itself, even as an empty string, available to use immidietly
  - Once you are done, string needs to clean after itself (clean the allocated memory automatically)
  - Allow copying from one variable to another 

Making it hard to use improperly.
----------------------------------------------------

Object Construction:

- The C++ code that runs when an object is declared is the 'constructor'
- A constructor should be set up so that the object can be used without futher initialization.
- A constructor can take arguments
  
  E.g. vector<int> v(10); 

  - Calls the vector constructor witht he value 10 so it can hold 10 things.   

how to create a constructor:
- same name as the class
- takes no arguments
- returns no return value

See constructor.cpp 

Vocab
- constructor
 
Q: What happens if you don't create a constructor?

- If you don't create a constructor, C++, friend that it is, will make one for you.
- Check if this is still true:
  - It will take no arguments
  - It will initialize all the fields but not primitive tyeps (int and char)
- Recommended you initialize things to your liking.

Suprising consequences:
- If you let C++ make default constructors and then you add non-default 
  constructor taking 1 or more arguments, code that depended on the auto-gerated default constructor
  will no longer compile. 
  You need to provide a default constructor manually since the compiler will no longer make one
  for you. 

-------------------------------------------------
Initializing members of the class

Vocab
- 'initialization list' = pass arguments, has weird syntax, : then commas ,

Using the initialization list for const fields:
- If you declare a field of your class a const then
  that field MUST be initialized in the 'initialization list'
- You cannot assign to it b/c they are set in stone!
- The initializtion list is the only place where the class
   is not yet fully formed, so it's safe to set immutable objects
- Same reason. If you have a reference field, it MUST be intitialized in the
  'initialization list' also.
------------------------------
E.g.
private
   const int _val;

ConstHolder::ConstHolder()
    : _val( val )
------------------------------
Using the initialization for const fields

Vocab
- const  

You cannot initialize a const field by assigining to it b/c those fields are ALREADY set in stone.

The initialization is the only place where the class is not yet fully formed, so it's safe to set
immutable objects.

Same thing with references, it must be initialized in the 'initialization list'
--------------------------------------------------
Object Destruction:

- Just like a constructor initializes an object, sometimes you need to have code
  that cleans up when your object is no longer needed.

- E.g. If your constructor allocates memory (or any other resources), then those resources 
must be returned to the OS  
  E.g. delete a pointer

- Dealing with this clean up is called 'destroying the object' and it takes place in a special method
called the 'constructor'.

Vocab
- destructor = cleans up resources and returns them to the OS
               cannot accept arguments
               starts with a ~

--------------------------------------------------

"The object is no longer needed" means 3 things:
1) When you delete a pointer to an object
2) When the object goes out of scope
3) When the object belongs to a class whose destructor is being called 

------------------------------------------------
1- Destruction on Delete

E.g.

LinkedList *p_list = new LinkedList;

// ~LinkedList (the destructor) is called on p_list

delete p_list;

------------------------------------------------

2- Destruction when going out of scope

E.g.

if(1)
{

    LinkedList list;

} // Here! Destructor is called here.


void foo()
{

    LinkedList list;

    // some code...
    if( /*some conditions*/ )
    {

        return;

    }

} // Here! List's destructor is called here. Not at return. AH HA!

Q: What if you have multiple destructors?

- Fact: The destructors are run in the opposite order that the objects were 
constructed.

E.g.
{

    LinkedList a;

    LinkedList b;

} // b is destroyed first, then a.


------------------------------------------------

3- Destruction due to another destructor

If you have an object that is contained inside another class,
the destructor for that object is called after running the destructor
for the class.

E.g.
class NameAndEmail
{

private:

    string _name;

    string _email;

};

- The destructors for the _name and _email fields will be called
  once the destructor for NameAndEmail finishes running.

- Very convenient b/c you don't need to do anything special. 
Just clean up pointers (call delete) or other things like handles and 
network connections.

- If you don't add a destructor to your class, the compiler will still make sure to run the destructor of any objects that are part of the class.

Vocab
- RAII = Resource allocation is initialization
- handles

The idea of using a constructor to initialize a class
and a destructor to clean up memory and other resources is: RAII

RAII means that in C++, you should create classes to handle resources, and that when you create classes the constructor should do all the init and the destructor should handle all cleanup.

Don't make users handle clean up.

------------------------------------------------

Copying classes

- Let's say you make 2 objects.

LinkedList list_one;

LinkedList list_two;

- If you want to do this:

list_two = list_one;

LInkedList list_three = list_two;

- Then c++ does offer default 'assignment operator' and 'copy constructor'

Vocab
- 'assignment operator'
- 'copy constructor'
- 'shallow copy'

- However, sometimes the compiler isn't smart enough to know what you want
E.g.
The compiler might make a 'shallow copy' of pointers. Both list_one and list_two will point to the same thing.

This is 'shallow' b/c none of the pointed-to memory is copied, just the pointer itself.

Althought 'shallow' copies can be ok, weird things can happen:

E.g. If you try to free memory pointed at a linked_list 

The destructor for list_two runs, deletes the list_two._p_head. (Remember, reverse order). 

Then the destructor for list_one will run, but list_one._p_head was already deleted! 

If you delete a pointer twice the program will crash!
----------------------------------

The 'assignment operator'

E.g. list_two = list_one;

New syntax, It's not too hairy:

    //
    // It's const b/c you should have no reason to 
    // modify the right hand side
    //
LinkedList& operator ==  (LinkedList& lhs, const LinkedList& rhs);

- Looks like a normal function (takes 2 args)
  Arg1: non-const reference to a LinkedList
  Arg2: const reference to a LinkedList

-The only weird thing is the name of the function: operator=

- It means you are defining what the '=' sign means instead of a function name

Hence...

lhs == rhs;

Q: Why return a reference to a LinkedList instead of a LinkedList?

A: So that you can chain together assignments

linked_list = b = c;

Note: If you add it to a class it will look like this:

//
// Inside a class, it takes only 1 argument b/c it is implied that
// the second argument is the class itself
//
LinkedList& operator ==  (const LinkedList& rhs);

// This is how you use it:
lhs = rhs;

// The 'operator=' function is called on the variable lhs as though 
// you'd written:

lhs.operator=(rhs);

----------------------------------











