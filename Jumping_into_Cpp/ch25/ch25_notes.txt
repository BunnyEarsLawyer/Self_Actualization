The lifecycle of a class

When you create a class, you want to make it as easy to use as possible.

3 basic operations a class needs to to:

1. Initializing itself
2. Cleaning up memory or other resources
3. Copying itself

- Important to create a good data type
- E.g. string
  - Initialize itself, even as an empty string, available to use immidietly
  - Once you are done, string needs to clean after itself (clean the allocated memory automatically)
  - Allow copying from one variable to another 

Making it hard to use improperly.
----------------------------------------------------

Object Construction:

- The C++ code that runs when an object is declared is the 'constructor'
- A constructor should be set up so that the object can be used without futher initialization.
- A constructor can take arguments
  
  E.g. vector<int> v(10); 

  - Calls the vector constructor witht he value 10 so it can hold 10 things.   

how to create a constructor:
- same name as the class
- takes no arguments
- returns no return value

See constructor.cpp 

Vocab
- constructor
 
Q: What happens if you don't create a constructor?

- If you don't create a constructor, C++, friend that it is, will make one for you.
- Check if this is still true:
  - It will take no arguments
  - It will initialize all the fields but not primitive tyeps (int and char)
- Recommended you initialize things to your liking.

Suprising consequences:
- If you let C++ make default constructors and then you add non-default 
  constructor taking 1 or more arguments, code that depended on the auto-gerated default constructor
  will no longer compile. 
  You need to provide a default constructor manually since the compiler will no longer make one
  for you. 

-------------------------------------------------
Initializing members of the class

Vocab
- 'initialization list' = pass arguments, has weird syntax, : then commas ,

Using the initialization list for const fields:
- If you declare a field of your class a const then
  that field MUST be initialized in the 'initialization list'
- You cannot assign to it b/c they are set in stone!
- The initializtion list is the only place where the class
   is not yet fully formed, so it's safe to set immutable objects
- Same reason. If you have a reference field, it MUST be intitialized in the
  'initialization list' also.
------------------------------
E.g.
private
   const int _val;

ConstHolder::ConstHolder()
    : _val( val )
------------------------------
Using the initialization for const fields

Vocab
- const  

You cannot initialize a const field by assigining to it b/c those fields are ALREADY set in stone.

The initialization is the only place where the class is not yet fully formed, so it's safe to set
immutable objects.

Same thing with references, it must be initialized in the 'initialization list'
--------------------------------------------------
Object Destruction:

- Just like a constructor initializes an object, sometimes you need to have code
  that cleans up when your object is no longer needed.

- E.g. If your constructor allocates memory (or any other resources), then those resources 
must be returned to the OS  
  E.g. delete a pointer

- Dealing with this clean up is called 'destroying the object' and it takes place in a special method
called the 'constructor'.

Vocab
- destructor = cleans up resources and returns them to the OS
               cannot accept arguments
               starts with a ~

--------------------------------------------------















